variables:
  protobuf-version: 3.7.0
  lkg-rust-nightly: "2019-03-20"

trigger:
  - master
  - dev

strategy:
  matrix:
    linux-stable:
      image: ubuntu-16.04
      toolchain: stable
      protobuf-platform: linux-x86_64
    macos-stable:
      image: macos-10.13
      toolchain: stable
      protobuf-platform: osx-x86_64
    windows-stable:
      image: vs2017-win2016
      toolchain: stable
      protobuf-platform: win64
    linux-nightly:
      image: ubuntu-16.04
      toolchain: nightly-$(lkg-rust-nightly)
      features: unstable
      protobuf-platform: linux-x86_64
    macos-nightly:
      image: macos-10.13
      toolchain: nightly-$(lkg-rust-nightly)
      features: unstable
      protobuf-platform: osx-x86_64
    windows-nightly:
      image: vs2017-win2016
      toolchain: nightly-$(lkg-rust-nightly)
      features: unstable
      protobuf-platform: win64

pool:
  vmImage: $(image)

steps:
  - bash: |
      set -e
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $(toolchain)
      echo "##vso[task.prependpath]$HOME/.cargo/bin"
      $HOME/.cargo/bin/rustc -Vv
    displayName: Install Rust
  - bash: |
      set -e
      mkdir /tmp/protoc
      cd /tmp/protoc
      curl -Lo protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v$(protobuf-version)/protoc-$(protobuf-version)-$(protobuf-platform).zip
      unzip protoc.zip
      echo "##vso[task.prependpath]/tmp/protoc/bin"
    displayName: Install Protobuf $(protobuf-version)
  - bash: git submodule sync && git submodule update --init
    displayName: Sync Azure Functions Protocol submodule
  - bash: |
      set -e
      cd azure-functions-shared
      cargo build --release --features compile_protobufs
      git diff --exit-code -- cache
    displayName: Compile protobufs
  - bash: |
      set -e
      rustup component add rustfmt
      cargo fmt --version || true
      cargo fmt -- --check
      git diff
    displayName: Check source formatting
  - bash: |
      set -e
      rustup component add clippy
      cargo clippy --version || true
      cargo clippy --release -- -Dwarnings
    displayName: Check for linter errors
  - bash: cargo build --release
    displayName: Build source
  - bash: |
      set -e
      cd azure-functions
      cargo build --release --features $(features)
    displayName: Build with additional features
    condition: and(succeeded(), ne(variables['features'], ''))
  - bash: cargo test --release
    displayName: Run tests
