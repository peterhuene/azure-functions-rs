// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct RpcClaimsIdentity {
    // message fields
    pub authentication_type: ::std::string::String,
    pub name_claim_type: ::std::string::String,
    pub role_claim_type: ::std::string::String,
    pub claims: ::protobuf::RepeatedField<RpcClaim>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl RpcClaimsIdentity {
    pub fn new() -> RpcClaimsIdentity {
        ::std::default::Default::default()
    }

    // string authentication_type = 1;

    pub fn clear_authentication_type(&mut self) {
        self.authentication_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_authentication_type(&mut self, v: ::std::string::String) {
        self.authentication_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authentication_type(&mut self) -> &mut ::std::string::String {
        &mut self.authentication_type
    }

    // Take field
    pub fn take_authentication_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.authentication_type, ::std::string::String::new())
    }

    pub fn get_authentication_type(&self) -> &str {
        &self.authentication_type
    }

    // string name_claim_type = 2;

    pub fn clear_name_claim_type(&mut self) {
        self.name_claim_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_name_claim_type(&mut self, v: ::std::string::String) {
        self.name_claim_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name_claim_type(&mut self) -> &mut ::std::string::String {
        &mut self.name_claim_type
    }

    // Take field
    pub fn take_name_claim_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name_claim_type, ::std::string::String::new())
    }

    pub fn get_name_claim_type(&self) -> &str {
        &self.name_claim_type
    }

    // string role_claim_type = 3;

    pub fn clear_role_claim_type(&mut self) {
        self.role_claim_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_role_claim_type(&mut self, v: ::std::string::String) {
        self.role_claim_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_role_claim_type(&mut self) -> &mut ::std::string::String {
        &mut self.role_claim_type
    }

    // Take field
    pub fn take_role_claim_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.role_claim_type, ::std::string::String::new())
    }

    pub fn get_role_claim_type(&self) -> &str {
        &self.role_claim_type
    }

    // repeated .RpcClaim claims = 4;

    pub fn clear_claims(&mut self) {
        self.claims.clear();
    }

    // Param is passed by value, moved
    pub fn set_claims(&mut self, v: ::protobuf::RepeatedField<RpcClaim>) {
        self.claims = v;
    }

    // Mutable pointer to the field.
    pub fn mut_claims(&mut self) -> &mut ::protobuf::RepeatedField<RpcClaim> {
        &mut self.claims
    }

    // Take field
    pub fn take_claims(&mut self) -> ::protobuf::RepeatedField<RpcClaim> {
        ::std::mem::replace(&mut self.claims, ::protobuf::RepeatedField::new())
    }

    pub fn get_claims(&self) -> &[RpcClaim] {
        &self.claims
    }
}

impl ::protobuf::Message for RpcClaimsIdentity {
    fn is_initialized(&self) -> bool {
        for v in &self.claims {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.authentication_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name_claim_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.role_claim_type)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.claims)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.authentication_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.authentication_type);
        }
        if !self.name_claim_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name_claim_type);
        }
        if !self.role_claim_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.role_claim_type);
        }
        for value in &self.claims {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.authentication_type.is_empty() {
            os.write_string(1, &self.authentication_type)?;
        }
        if !self.name_claim_type.is_empty() {
            os.write_string(2, &self.name_claim_type)?;
        }
        if !self.role_claim_type.is_empty() {
            os.write_string(3, &self.role_claim_type)?;
        }
        for v in &self.claims {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RpcClaimsIdentity {
        RpcClaimsIdentity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "authentication_type",
                    |m: &RpcClaimsIdentity| { &m.authentication_type },
                    |m: &mut RpcClaimsIdentity| { &mut m.authentication_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name_claim_type",
                    |m: &RpcClaimsIdentity| { &m.name_claim_type },
                    |m: &mut RpcClaimsIdentity| { &mut m.name_claim_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "role_claim_type",
                    |m: &RpcClaimsIdentity| { &m.role_claim_type },
                    |m: &mut RpcClaimsIdentity| { &mut m.role_claim_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RpcClaim>>(
                    "claims",
                    |m: &RpcClaimsIdentity| { &m.claims },
                    |m: &mut RpcClaimsIdentity| { &mut m.claims },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RpcClaimsIdentity>(
                    "RpcClaimsIdentity",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RpcClaimsIdentity {
        static mut instance: ::protobuf::lazy::Lazy<RpcClaimsIdentity> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RpcClaimsIdentity,
        };
        unsafe {
            instance.get(RpcClaimsIdentity::new)
        }
    }
}

impl ::protobuf::Clear for RpcClaimsIdentity {
    fn clear(&mut self) {
        self.clear_authentication_type();
        self.clear_name_claim_type();
        self.clear_role_claim_type();
        self.clear_claims();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RpcClaimsIdentity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RpcClaimsIdentity {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RpcClaim {
    // message fields
    pub value: ::std::string::String,
    pub field_type: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl RpcClaim {
    pub fn new() -> RpcClaim {
        ::std::default::Default::default()
    }

    // string value = 1;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    pub fn get_value(&self) -> &str {
        &self.value
    }

    // string type = 2;

    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
}

impl ::protobuf::Message for RpcClaim {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RpcClaim {
        RpcClaim::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &RpcClaim| { &m.value },
                    |m: &mut RpcClaim| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &RpcClaim| { &m.field_type },
                    |m: &mut RpcClaim| { &mut m.field_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RpcClaim>(
                    "RpcClaim",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RpcClaim {
        static mut instance: ::protobuf::lazy::Lazy<RpcClaim> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RpcClaim,
        };
        unsafe {
            instance.get(RpcClaim::new)
        }
    }
}

impl ::protobuf::Clear for RpcClaim {
    fn clear(&mut self) {
        self.clear_value();
        self.clear_field_type();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RpcClaim {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RpcClaim {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20identity/ClaimsIdentityRpc.proto\"\xb7\x01\n\x11RpcClaimsIdentity\
    \x12/\n\x13authentication_type\x18\x01\x20\x01(\tR\x12authenticationType\
    \x12&\n\x0fname_claim_type\x18\x02\x20\x01(\tR\rnameClaimType\x12&\n\x0f\
    role_claim_type\x18\x03\x20\x01(\tR\rroleClaimType\x12!\n\x06claims\x18\
    \x04\x20\x03(\x0b2\t.RpcClaimR\x06claims\"4\n\x08RpcClaim\x12\x14\n\x05v\
    alue\x18\x01\x20\x01(\tR\x05value\x12\x12\n\x04type\x18\x02\x20\x01(\tR\
    \x04typeb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
